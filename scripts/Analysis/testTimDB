#!/usr/local/bin/perl

BEGIN {
    unshift (@INC,"/nfs/disk89/michele/pogdir/bioperl-live");
    unshift (@INC,"/nfs/disk89/michele/pogdir/ensembl/modules");
}

# Let the code begin...


use Bio::EnsEMBL::Analysis::GFF;
use Bio::EnsEMBL::Analysis::Analysis;
use Bio::EnsEMBL::Analysis::MSPType;

use Bio::EnsEMBL::DBSQL::Obj;
use Bio::EnsEMBL::DBSQL::Contig;

use Bio::EnsEMBL::TimDB::Obj;

use Getopt::Long;
use strict;

my ($clonefile,
    $clone,
);


GetOptions("clonefile=s" => \$clonefile,            # File of clone names
	   "clone=s"     => \$clone,                # Clone name on the command line
	   ) or usage();

# Connect to the database
my @clones     = read_clones($clonefile,$clone);

my $db         = Bio::EnsEMBL::DBSQL::Obj->new(-dbname => 'ensdev',
					       -host   => 'obi-wan',
					       -user   => 'ensdev',
					       )  or die "Can't connect to database";

my $timdb      = Bio::EnsEMBL::TimDB::Obj->new('','',1);
my @clones     = $timdb->get_all_Clone_id;

CLONE: foreach my $cloneid (@clones) {

#    eval{
	print("\nProcessing clone $cloneid\n");
	
	print("Fetching TimDB object\n");
	
	my $tim_clone   = $timdb->get_Clone($cloneid);
	my @tim_contigs = $tim_clone->get_all_Contigs();
	

	print("Number of contigs found is " . (1+$#tim_contigs) . "\n");
	

	CONTIG: foreach my $contig (@tim_contigs) {
#	    next CONTIG unless $contig->id =~ /00001/;
	    print(" - Processing contig " . $contig->id . "\n");

	    my @features = $contig->get_all_SeqFeatures;
	    
	    print("Number of features found is " . ($#features+1) . "\n");

	    foreach my $f (@features) {
		print($f->seqname    . "\t" . 
		      $f->source_tag . "\t" . 
		      $f->start      . "\t" . 
		      $f->end        . "\t" . 
		      $f->primary_tag . "\t" . 
		      $f->strand      . "\t" . 
		      $f->frame       . "\t");

		if ($f->isa("Bio::SeqFeature::Homol")) {
		    my $h = $f->homol_SeqFeature;
		    print($h->seqname . "\t"  . 
			  $h->source_tag . "\t" .
			  $h->start   . "\t" . 
			  $h->end     . "\n");
		}

		

	    }

	}
 #   }; 

 #   if (@_) {
#	print(STDERR "@_");
#	next CONTIG;
#    }
}




sub get_accession {
    my ($cloneid) = @_;

    if ($cloneid =~ /^AC/) {
	return $cloneid;
    }

    open (IN,"clone2accession $cloneid |");

    my $line = <IN>;
    chomp($line);
    my ($clone,$acc) = split(' ',$line);

    if ($acc eq "") {
	print(STDERR "Couldn't fetch accession no. for clone $cloneid\n");
	return;
    } else {
	return $acc;
    }
}
sub read_clones {
    my ($clonefile,$clone) = @_;

    my @clones;

    if (defined($clonefile)) {
	open(IN,"<$clonefile") || die "Couldn't open $clonefile";
	while (<IN>) {
	    chomp;
	    push(@clones,$_);
	}
    }
    push(@clones,$clone);

    return @clones;
}

sub make_analysis {
    my ($file) = @_;

    my $ext;

    if ($file =~ /msptmp$/) {
	($ext  = $file) =~ s/.*(\..*.msptmp)/$1/;
    } elsif ($file =~ /RepMask.out.gff/) {
	$ext = ".RepMask.out.gff";
    }

    my $test    = Bio::EnsEMBL::Analysis::MSPType->each_MSPType;
    my $MSPType = Bio::EnsEMBL::Analysis::MSPType->extension2MSPType($ext);
    
    my $anal = new Bio::EnsEMBL::Analysis::Analysis;
    
    $anal->db             ($MSPType->[2]);
    $anal->db_version     ($MSPType->[6]);
    $anal->program        ($MSPType->[1]);
    $anal->program_version($MSPType->[7]);
    $anal->gff_source     ($MSPType->[1]);
    $anal->gff_feature    ($MSPType->[8]);
    
    return $anal;
}
    
sub accession2clone {
    my ($acc) = @_;

    open(IN,"efetch EM:$acc |grep \"^DE\" |");

    while (my $line = <IN>) {
	if ($line =~ /.* from clone +(.*)\n$/) {
	    my $clone = $1;
	    print("clone is $clone\n");
	    close(IN);
	    return $clone;
	}
    }
}
