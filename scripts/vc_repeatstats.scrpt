#!/usr/local/bin/perl -w
#A script to gather statistics on repeats in virtual contigs
#MAQ

=head1 NAME

vc_repeatstats.scrpt: Generates statistics about repeats within a virtual contig

=head1 SYNOPSIS

    vc_repeatstats.scrpt

=head1 DESCRIPTION



=head1 OPTIONS

     -host      host name for database (gets put as host= in locator)

    -port      For RDBs, what port to connect to (port= in locator)

    -dbname    For RDBs, what name to connect to (dbname= in locator)

    -dbuser    For RDBs, what username to connect as (dbuser= in locator)

    -dbpass    For RDBs, what password to use (dbpass= in locator)

=cut

use strict;

use Getopt::Long;

use Bio::EnsEMBL::DBSQL::Obj;
use Bio::EnsEMBL::DBLoader;
use Data::Dumper;

my $dbtype = 'rdb';
my $host   = 'localhost';
my $port   = '410000';
my $dbname = 'ensembl_freeze24';
my $dbuser = 'root';
my $pass   = '';
my $seedlist  = undef;

&GetOptions( 
	     'host:s'    => \$host,
	     'port:n'    => \$port,
	     'dbname:s'  => \$dbname,
	     'dbuser:s'  => \$dbuser,
	     'pass:s'    => \$pass,
	     'seed=s'    => \$seedlist,
         );
 
my %repeatlist;
my $vc_totlength;
#get a db handle
my $module  = "Bio::EnsEMBL::DBSQL::Obj";

my $locator = make_locator_string
                ($dbtype,$module,$host,$port,$dbname,$dbuser,$pass);

my $db      = new Bio::EnsEMBL::DBLoader($locator);

#make array of seed ids
die "Require list of contig ids\n" unless ($seedlist);
my @seeds = split(/\s+/, $seedlist);

foreach my $seedid (@seeds)
{
    print "SEED ID $seedid\n";
    my $rawcontig = Bio::EnsEMBL::DBSQL::RawContig->new (
                                                -dbobj  => $db,
                                                -id     => $seedid,
                                                );
                    
    my $position = $rawcontig->golden_start;
    my $virtcontig = Bio::EnsEMBL::DB::VirtualContig->new (
                                                -focuscontig    => $rawcontig,
                                                -focusposition  => $position,
                                                -ori            => 1,
                                                -left           => 200000000,
                                                -right          => 200000000,
                                                );
    $vc_totlength += $virtcontig->length();
    my @repeats = $virtcontig->get_all_RepeatFeatures();
    foreach my $repeat (@repeats)
    {
        my $rname = $repeat->hseqname();
        $rname =~ s/motif://i;
        $repeatlist{$rname}->{'number'} += 1;
        $repeatlist{$rname}->{'totlen'} += $repeat->length();
        push (@{$repeatlist{$rname}->{'len'}}, $repeat->length());
        
    }
}
printstats ($vc_totlength, %repeatlist);


sub printstats {
    my ($LengthOfAllVC, %repeatlist) =@_;
    my ($LengthOfAllRepeats, $NumOfAllRepeats);
    my %typestat;
    
    foreach my $rname (keys(%repeatlist))
    {   
        $LengthOfAllRepeats +=  $repeatlist{$rname}->{'totlen'};
        $NumOfAllRepeats += $repeatlist{$rname}->{'number'};
        #will insert aggregation of ALUs, L1s, and MERs here
    }
    
    #DISPLAY
    print "Repeat Name \t\t Number \t Tot. Length \t Ave.Length \t % Length\n";
    foreach my $rname (keys(%repeatlist))
    {
        my $number = $repeatlist{$rname}->{'number'};
        my $totlen = $repeatlist{$rname}->{'totlen'};
        my $avelen = $totlen / $number;
        my $percentlen = ($totlen / $LengthOfAllVC) * 100;
        #my stddev = 
        
        printf " %-20s \t %-6d \t %-9d \t %-5d \t\t %-3.2f %%\n", 
                                    $rname,
                                    $number,
                                    $totlen,
                                    $avelen,
                                    $percentlen;
    }
    printf " %-20s \t %-6d \t %-9d \t %-5d \t\t %-3.2f %%\n",
                                    'TOTAL', 
                                    $NumOfAllRepeats,
                                    $LengthOfAllRepeats,
                                    $LengthOfAllRepeats/$NumOfAllRepeats,
                                    ($LengthOfAllRepeats/$LengthOfAllVC) *100;
    
}

sub make_locator_string {
    my ($type,$module,$host,$port,$dbname,$dbuser,$dbpass) = @_;

    return "$module/host=$host;port=$port;dbname=$dbname;user=$dbuser;pass=$dbpass";

}
