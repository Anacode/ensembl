#!/usr/local/bin/perl 

use strict;

use Getopt::Long;

use Bio::EnsEMBL::DBSQL::DBAdaptor;

use Bio::EnsEMBL::Pipeline::Runnable::Blast;

use Bio::EnsemblViewer::KaryotypePlot;
use Bio::EnsemblViewer::KaryoFeature;

use Bio::SeqIO;


my $dbtype   = 'rdb';
my $host     = 'ensrv1.sanger.ac.uk';
my $dbname   = 'ensembl100';
my $dbuser   = 'ensro';
my $pepdb    = '/scratch1/ensembl/michele/ensembl100/ensembl.pep';
my $pfmdb    = '/scratch1/ensembl/michele/ensembl100/ensembl.pfam.pep';
my $gendb    = '/scratch1/ensembl/michele/ensembl100/ens1.0.0_golden_path_repeatmasked';

my $infile;
my $outfile;
my $pretty;
my $threshold = 0;
my $path = 'UCSC';
my $pfam;
my $genomic;
my $peptide;
my $help;

&GetOptions( 
	    'host=s'       => \$host,
	    'dbname=s'     => \$dbname,
	    'dbuser=s'     => \$dbuser,
	    'pepdb=s'      => \$pepdb,
	    'gendb=s'      => \$gendb,
	    'infile=s'     => \$infile,
	    'outfile=s'    => \$outfile,
	    'pretty'       => \$pretty,
	    'threshold:n'  => \$threshold,
	    'pfam'         => \$pfam,
	    'path:s'       => \$path,
	    'genomic'      => \$genomic,
	    'peptide'      => \$peptide,
	    'help'         => \$help,
	   ) || usage();

if ($help) { usage(); exit(0);}

if (!$peptide && !$genomic)  {usage(); exit(0)};
if (!$infile)                {usage(); exit(0)};
$|=1;

my $locator;
my $mapdb;
my %chrlen;
my %contig;
my $fh;
my $pwd = `pwd`; chomp($pwd);


my $db            = new Bio::EnsEMBL::DBSQL::DBAdaptor(-host   => $host,
						       -dbname => $dbname,
						       -user   => $dbuser);
my @protseqs      = get_prot_seqs($infile);
	
if (defined($db)) {
  print(STDERR "Connected to database\n");
}

if ($#protseqs < 0) {
    die "No input protein sequences\n";
}

if ($outfile) {
    open(OUT,">$outfile");
    $fh = \*OUT;
} else {
    $fh = \*STDOUT;
}

$db->static_golden_path_type($path);

my $sa = $db->get_StaticGoldenPathAdaptor();


foreach my $seq (@protseqs) {

  my $prodb = $pepdb;

  if ($pfam) {
    $prodb = $pfmdb;
  }

  my @enshits = run_ensembl_blast($seq,$prodb) unless ! $peptide;
  my @genhits = run_genome_blast ($seq,$gendb) unless ! $genomic;

  my @new_pep_hits = process_blast_pep_hits($db,$threshold,@enshits)                 unless !$peptide;
  my @new_gen_hits = process_blast_gen_hits($db,$threshold,\@genhits,\@new_pep_hits) unless !$genomic;

  # Now plot a karyotype thingy.
  my @features;

  push(@features,@new_pep_hits) unless ! $peptide;
  push(@features,@new_gen_hits) unless ! $genomic;

  plot_features($seq,$db,@features);

}

sub usage {
  print STDERR "Usage: chrhits -infile <fastafile> [-host <host>] [-dbname <dbname>] [-dbuser <dbuser>] [-pepdb <pepdb>] [-gendb <gendb>] [-pfam] [-path] [-genomic] [-peptide] [-threshold] [-outfile <outfile>]\n\n";
  print STDERR "  fastafile  : File of protein sequences to blast against the genome\n";
  print STDERR "  dbname     : Ensembl database to connect to (default ensembl100)\n";
  print STDERR "  dbuser     : Ensembl database user          (default ensro)\n";
  print STDERR "  host       : Ensembl database host          (default ensrv1)\n";
  print STDERR "  pepdb      : Ensembl peptide blast database\n";
  print STDERR "  gendb      : Repeatmasked genomic database\n";
  print STDERR "  pfam       : Screen out hits to pfam domains\n";
  print STDERR "  path       : Golden path to use             (default UCSC)\n";
  print STDERR "  genomic    : Blast against genomic database\n";
  print STDERR "  peptide    : Blast against peptide database\n";
  print STDERR "  outfile    : Output text file for the features\n";
  print STDERR "  threshold  : Score threshold to filter blast hits by\n\n";
  print STDERR "Examples:\n";
  print STDERR "  ./chrhits -infile myfile.fa -peptide -genomic\n\n";
  print STDERR "This blasts all fasta protein sequences in myfile.fa against both the ensembl\n";
  print STDERR "peptide set and the repeatmasked genomic sequence.  Only those genomic hits that\n";
  print STDERR "are not covered by the ensembl gene set are reported.\n\n";
  print STDERR "  ./chrhits -infile myfile.fa -peptide -pfam\n\n";
  print STDERR "Blasts against the ensembl peptide set and filters out all hits to pfam domains\n\n";
  print STDERR "  ./chrhits -infile myfile.fa -genomic -threshold 100\n\n";
  print STDERR "Blasts against the repeatmasked genomic database and only reports those hits scoring\n";
  print STDERR "Over 100\n\n";
  print STDERR "Example output : \n\n";
  print STDERR " 1C7_TR:O14931   208987100       208987109       3.2e-05 107     +       .       ENSG00000035215 CTLA4   235     244     chr2    210     219     ctg12913\n\n";
  print STDERR "The columns are \n<query id>\n<chr start>\n<chr end>\n<e value>\n<score>\n<strand>\n<phase>\n<ensembl id>\n<hugo id>\n<query start>\n<query end>\n<chromosome>\n<hit start>\n<hit end>\n<fpc contig>\n\n";
  print STDERR "As well as a text file html and gif files are produced.  The file name will be queryid.html\n";
}
  
  

sub plot_features {
  my ($seq,$db,@features) = @_;

  print "Id is " . $seq->id . "\n";

  my $image_param =  {
		      x_img_len       => 700,
		      y_img_len       => 700,
		      left_margin     => 30,
		      right_margin    => 20,
		      top_margin      => 40,
		      bottom_margin   => 50, 
		      arc_height      => 4, 
		      chr_width	      => 15, 
		      plot_height     => 2,
		     };
  
  my @plot_points;

F: foreach my $f (@features){

  my $point = Bio::EnsemblViewer::KaryoFeature->new();

  my $geneid = $f->hseqname;
  my $chr    = $f->{_contig}->chromosome;
  my $hugo   = $f->{_hugo};

  $point->id         ($geneid);
  $point->primary_tag($f->primary_tag);
  $point->raw_seqname($geneid);
  $point->seqname    ($f->{_contig}->chromosome);
  $point->start      ($f->start);
  $point->end        ($f->end);
  $point->score      ($f->score);
  $point->percent_id (100);

  my $name  = $f->hseqname;

  if (defined($hugo) && $hugo ne "") {
    $name = $hugo;
  }

  $point->add_URL({
		   display => "Gene $name",
		   url	   => "http://www.ensembl.org/perl/geneview?gene=$geneid",
		  });

  $point->add_URL({
		   display => "E value " . $f->p_value . " Score " . $f->score,
		   url     => "http://www.ensembl.org/perl/geneview?gene=$geneid",
		  });

  $point->add_URL({
		   display => "Protein coords " . $f->start . "-" . $f->end,
		   url     => "",
		  });
  
  $point->add_URL({
		   display => "Hit coords " . $f->hstart . "-" . $f->hend,
		   url     => "",
		  });

  my $start = $f->{_vc}->_global_start;
  my $end   = $f->{_vc}->_global_end;


  $point->add_URL({
		   display => $chr . " : " . $start . "-" . $end,
		   url	   => "http://www.ensembl.org/perl/contigview?chr=" . $f->{_contig}->chromosome 
		   ."&wvc_start=".($start-5000)."&wvc_end=".($end+5000),
		  });    

  
  push @plot_points, $point;
}

  @plot_points = sort {$b->score <=> $a->score} @plot_points;

  print STDERR "Found " . scalar(@plot_points) . " plot points\n";

  return if ($#plot_points < 0);

  my $plot_obj=Bio::EnsemblViewer::KaryotypePlot->new(-db          => $db,
						      -image_par   => $image_param,
						      -plot_points => \@plot_points);
  
  $plot_obj->draw_rows(2);

  my $id = $seq->id;
  
  open (MAP,">$pwd/$id.html");
  print MAP "<html><head><title>Blast genome hits</title><LINK rel=\"stylesheet\" href=\"http://www.ensembl.org/EnsEMBL.css\">\n";
  print MAP "<script language = \"javascript\">\n";
  print MAP "<!-- Hide script\n";
  print MAP "function init()  {  \n";
  print MAP "   document.feederform.q.focus();\n";
  print MAP "    document.feederform.q.select();\n";
  print MAP "    return (false);\n";
  print MAP "}\n";
  print MAP "  preloaders = new Array;\n";
  print MAP "  preloaders[0] = new Image(1,1);\n";
  print MAP "  preloaders[0].src = \"http://www.ensembl.org/gfx/blank.gif\";\n";
  print MAP "  preloaders[1] = new Image(112,195);\n";
  print MAP "  preloaders[1].src = \"http://www.ensembl.org/gfx/gray.gif\";\n";
  print MAP "  preloaders[2] = new Image(112,195);\n";
  print MAP "  preloaders[2].src = \"http://www.ensembl.org/gfx/green.gif\";\n";
  print MAP "  preloaders[3] = new Image(16,16);\n";
  print MAP "  preloaders[3].src = \"http://www.ensembl.org/gfx/close.gif\";\n";
  print MAP "// End script hiding -->\n";
  

  print MAP "</script><script language=\"javascript\" src=\"file:/work1/michele/trunk/sanger-web/htdocs/js/zmenu.js\"></script></head><body onload=\"init()\" <div id=\"jstooldiv\" style=\"position: absolute;visibility: hidden;\"></div><img src=$id.gif usemap=#pog>\n<map name=pog>\n";
  my $gif=$plot_obj->get_GIF(\*MAP);
  print MAP "</map></body></html>\n";
  open (OUT,">$pwd/$id.gif");
  print OUT $gif;
  close(OUT);
  close(MAP);

  
}

sub get_Gene_from_TranslationId {
  my ($id,$db) =@_;

  my $sth = $db->prepare("select gene from transcript where translation = \'$id\'");
  my $res = $sth->execute;

  my $row = $sth->fetchrow_hashref;

  my $id = $row->{'gene'};

  return $id;
}

sub get_Gene_from_TranslationId {
  my ($id,$db) =@_;

  my $sth = $db->prepare("select gene from transcript where translation = \'$id\'");
  my $res = $sth->execute;

  my $row = $sth->fetchrow_hashref;

  my $id = $row->{'gene'};

  return $id;
}

sub process_blast_gen_hits {
  my ($db,$threshold,$genhits,$pephits) = @_;


  my @newhits;
  my %contig;


  HIT: 
  foreach my $genhit (@$genhits) {

    foreach my $pephit (@$pephits) {
      if ($pephit->overlaps($genhit)) {
	next HIT;
      }
    }
    my $contig;
    if (!defined($contig{$genhit->hseqname})) {
      $contig = $db->get_Contig($genhit->hseqname);
      $contig{$genhit->hseqname} = $contig;
    } else {
      $contig = $contig{$genhit->hseqname};
    }
    my $chr_pos;
    my $fpc_contig_len;
    my $global_start;
    my $global_end;
    my $vc;  

    eval {
      $vc     = $sa->fetch_VirtualContig_of_contig($contig->id,10000);
    };
    if ($@) {
      print STDERR "Non goldenpath contig. Skipping\n";
      next HIT;
    }

    $genhit->{_contig} = $contig;
    $genhit->{_vc}     = $vc;

    if ($genhit->score > $threshold) {
      print_feature($genhit,$contig,$pretty,$vc->_global_start,$vc->_global_end);
      push(@newhits,$genhit);
    }
  }

  return @newhits;

}


sub process_blast_pep_hits {
  my ($db,$threshold,@hits) = @_;

  my @newf;    
  my $count = 1;

  my %geneids;
  my %gene;
  my %hugo;
  my %vc;
      

  foreach my $f (@hits) {
    $count++;

    my $id = $f->hseqname;
    $id =~ s/^(\S+).*/$1/;


    my $vc;
    my $geneid;
    my $hugo;
    my $gene;

    if (!defined($geneids{$id})) {
      $geneid  = get_Gene_from_TranslationId($id,$db);

      $f->hseqname($geneid);
      
      $gene    = $db->gene_Obj->get($geneid);
      $hugo    = get_hugo($gene);
      $vc      = $sa->fetch_VirtualContig_by_gene($f->hseqname);
      
      $geneids{$id} = $geneid;
      $gene   {$id} = $gene;
      $hugo   {$id} = $hugo;
      $vc     {$id} = $vc;
    } else {
      $geneid = $geneids{$id};
      $gene   = $gene   {$id};
      $hugo   = $hugo   {$id};
      $vc     = $vc     {$id};

      $f->hseqname($geneid);
    }


    # get exon fingerprint here

    my $chr      = $vc->_chr_name;
    my $vc_start = $vc->_global_start;
    my $vc_end   = $vc->_global_end;
    my @contigs   = $vc->_vmap->each_MapContig;
    
    my $contig = $contigs[0]->contig;

    if ($f->isa("Bio::EnsEMBL::FeaturePair")) {

      if ($f->score > $threshold) {
	push(@newf,$f);
	$f->{_contig} = $contig;
	$f->{_vc}     = $vc;
	$f->{_hugo}   = $hugo;
      
	print_feature($f,$contig,$pretty,$vc_start,$vc_end,$hugo);

      }
    }
  }
  return @newf;
}



sub find_accession {
  my ($id) = @_;

  my $command = "getz \"[swall-id:$id]\" -f acc |";

  print STDERR "finding for $id $command\n";


  open(IN,$command);
  my $accession;

  while (<IN>) {
    chomp;
    print STDERR "Found $_\n";
    if (/^AC +(\S+)/) {
      $accession = $1;
    }
  }
  close (IN);

  if ($accession) {
    return $accession;
  }

  open(IN,"getz \"[swall-acc:$id]\" -f acc |");

  while (<IN>) {
    chomp;
    if (/^AC +(\S+)/) {
      print STDERR "Found $_\n";
      $accession = $1;
    }
  }
  close (IN);

  return $accession;
}

sub get_hugo {
  my ($gene) = @_;

  my $hugo;

  my @dblinks = $gene->each_DBLink;
    
  foreach my $link (@dblinks) {
    if ($link->database eq "HUGO") {
      return $link->display_id;
    }
  }
}

sub print_feature {
    my ($f,$contig,$pretty,$global_start,$global_end,$hugo) = @_;

    my $strand = "+";
    if ($f->strand == -1) {
	$strand = "-";
    }
      
   return unless ($f->isa("Bio::EnsEMBL::FeaturePair")) ;

    if ($pretty) {
	  printf $fh "%20s %15s %15s %10d %10d %8.1f %2d %2s %20s %15s %8d %8d %10s %10d %10d %s\n",
	  $f->seqname,
	  $contig->chromosome,
	  $f->primary_tag,
	  $f->start,
	  $f->end,
	  $f->p_value,
	  $strand,".",
	  $f->hseqname,
	  $hugo,
	  $f->hstart,
	  $f->hend,
	  $contig->chromosome,
	  $global_start,
	  $global_end,
	  $contig->fpc_contig_name;
      } else  {
	  print $fh $f->seqname     . "\t" . 
	    ($f->start + $global_start-1)   . "\t" . 
	    ($f->end   + $global_start-1)   . "\t" . 
            $f->p_value                     . "\t" . 
	    $f->score                       . "\t" .
	    $strand                         . "\t.\t" . 
	    $f->hseqname                    . "\t" . 
	    $hugo                           . "\t" .
	    $f->hstart                      . "\t" . 
	    $f->hend                        . "\t" . 
	    $contig->chromosome             . "\t" . 
	    $f->start                       . "\t" . 
	    $f->end                         . "\t" . 
	    $contig->fpc_contig_name  . "\n";
      }
}



sub print_gene {
    my ($g,$contig,$pretty,$global_start,$global_end) = @_;
    
    
    foreach my $tran ($g->each_Transcript) {
      EX: foreach my $exon ($tran->each_Exon) {
	  next EX if ($exon->contig_id ne $contig->id);
	    my $strand = "+";
	    
	    if ($exon->strand == -1) {
		$strand = "-";
	    }
	    
	    if ($pretty) {
		printf $fh "%20s %15s %15s %10d %10d %8.1f %2d %2s %20s %8d %8d %10s %10d %10d %s\n",
		$exon->contig_id,
		$contig->chromosome,
		'ensembl',
		($exon->start + $global_start-1),
		($exon->end   + $global_start-1),
		'100',
		$strand,".",
		$g->id . "." . $tran->id,
		'0','0',
		$contig->chromosome,
		$global_start,$global_end,
		$contig->fpc_contig_name;
	    } else {
		print $fh $exon->contig_id . "\tensembl\texon\t" . ($exon->start+$global_start-1) . "\t" . 
		    ($exon->end + $global_start-1) . "\t100\t" . 
		    $strand . "\t" . $exon->phase . "\t" . $g->id . "." . $tran->id . "\t" .
		    $contig->chromosome    . "\t" . 
		    $exon->start       . "\t" . 
		    $exon->end         . "\t" . 
		    $contig->fpc_contig_name  . "\n";
	    }
	    
	}
    }
}



sub get_contig {
    my ($contigid) = @_;

    
    if (!defined($contig{$contigid})) {
	print STDERR "Getting contig $contigid\n";
	$contig{$contigid} = $db->get_Contig($contigid);
    }

    return $contig{$contigid};
}


sub gffstring {
   my ($self) = @_;

   my $str = $self->seqname . "\t" . $self->source_tag . "\t" . 
          $self->primary_tag . "\t" . $self->start . "\t" . $self->end . "\t" ;

   my $strand = ".";
   if ($self->strand == 1) {
       $strand = "+";
   } elsif ($self->strand == -1) {
       $strand = "-";
   }

   $str .= $self->score .    "\t" . $strand . "\t.\t" ;     
   $str .= $self->hseqname . "\t" . $self->hstart . "\t" . 
           $self->hend     . "\t" . $self->hstrand ;

   return $str;
}

sub get_prot_seqs {
    my ($infile) = @_;

    my @seqs;
    open(SEQ,"<$infile") || die "Couldn't open sequence file [$infile]\n";
    
    my $seqio = new Bio::SeqIO(-format => 'fasta',-fh => \*SEQ);

    while (my $seq = $seqio->next_seq) {
      push(@seqs,$seq);
    }
    return @seqs;
}

sub run_ensembl_blast {
  my ($seq,$pepdb) = @_;

  my $blast =  Bio::EnsEMBL::Pipeline::Runnable::Blast->new (-query    => $seq,
							     -program  => 'wublastp',
							     -database => $pepdb,
							     -threshold => 1e-2);

  $blast->run;

  my @out = $blast->output;

  print STDERR "Number of blast hits " . scalar(@out) . "\n";
  return @out;
}

sub run_genome_blast {
  my ($seq,$gendb) = @_;

  my $blast =  Bio::EnsEMBL::Pipeline::Runnable::Blast->new (-query    => $seq,
							     -program  => 'wutblastn',
							     -database => $gendb,
							     -threshold => 1e-2);

  $blast->run;

  my @out = $blast->output;

  return @out;
  
}
