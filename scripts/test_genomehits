#!/usr/local/bin/perl 

use strict;
use Getopt::Long;
use vars qw(@ISA);

use Bio::EnsEMBL::DBLoader;

@ISA = qw(Bio::Root::Object);

my $dbtype = 'rdb';
my $host   = 'ensrv3.sanger.ac.uk';
my $port   = '3306';
my $dbname = 'ensembl07';
my $dbuser = 'ensro';
my $pass = undef;
my $module = "Bio::EnsEMBL::DBSQL::Obj";


&GetOptions( 
	     'dbtype:s'  => \$dbtype,
	     'host:s'    => \$host,
	     'port:n'    => \$port,
	     'dbname:s'  => \$dbname,
	     'dbuser=s'  => \$dbuser,
	     'pass:s'    => \$pass,
	     );

$|=1;

my $locator       = make_locator_string($dbtype,$module,$host,$port,$dbname,$dbuser,$pass);
my $db            = new Bio::EnsEMBL::DBLoader($locator);

if (defined($db)) {
  print("Connected to database\n");
}

my @hids;

push(@hids,@ARGV);

if (scalar(@hids) == 0) {
    push(@hids,"SW:HBA_HUMAN");
}

foreach my $f (@hids) {
    my @features      = $db->find_GenomeHits($f);

    foreach my $f (@features) {
	$f->invert;

	my $gffstring = gffstring($f);

	print($gffstring . "\n");

    }

}
sub make_locator_string {
    my ($type,$module,$host,$port,$dbname,$dbuser,$dbpass) = @_;

    if ($type eq "rdb") {
	return 	"$module/host=$host;port=$port;dbname=$dbname;user=$dbuser;pass=$dbpass";
    } elsif ($type eq "timdb") {
	return "Bio::EnsEMBL::TimDB::Obj";
    } else {
	die "Database type [$type] not recognised\n";
    }
}

sub gffstring {
   my ($self) = @_;

   my $str = $self->seqname . "\t" . $self->source_tag . "\t" . 
          $self->primary_tag . "\t" . $self->start . "\t" . $self->end . "\t" ;

   my $strand = ".";
   if ($self->strand == 1) {
       $strand = "+";
   } elsif ($self->strand == -1) {
       $strand = "-";
   }

   $str .= $self->score .    "\t" . $strand . "\t.\t" ;     
   $str .= $self->hseqname . "\t" . $self->hstart . "\t" . 
           $self->hend     . "\t" . $self->hstrand ;

   return $str;
}


