#!/usr/local/bin/perl 

BEGIN {
   unshift(@INC,"/nfs/disk100/humpub/birney/ensembl/modules");
   unshift(@INC,"/nfs/disk100/humpub/birney/ensembl-pipeline/modules");
   unshift(@INC,"/nfs/disk100/humpub/birney/bioperl-live");
}

use strict;
use Getopt::Long;
use vars qw(@ISA);

use Bio::EnsEMBL::DBLoader;

@ISA = qw(Bio::Root::Object);

my $dbtype = 'rdb';
my $host   = 'ensrv4.sanger.ac.uk';
my $dbname = 'ensembl_freeze17_michele';
my $dbuser = 'ensro';
my $module = "Bio::EnsEMBL::DBSQL::Obj";
my $infile;

&GetOptions( 
	     'host:s'    => \$host,
	     'dbname:s'  => \$dbname,
	     'dbuser=s'  => \$dbuser,
	     'infile=s'  => \$infile,
	     );

$|=1;

my $locator       = make_locator_string($dbtype,$module,$host,3306,$dbname,$dbuser,'');
my $db            = new Bio::EnsEMBL::DBLoader($locator);
my @hids          = get_hit_ids($infile,@ARGV);

if (defined($db)) {
  print(STDERR "Connected to database\n");
}

if ($#hids < 0) {
    die "No input hit ids\n";
}
$db->static_golden_path_type("UCSC");
my %contig;

foreach my $f (@hids) {
    my @features      = $db->find_GenomeHits($f);

    foreach my $h (@features) {
	if (!defined($contig{$h->seqname})) {
	    $contig{$h->seqname} = $db->get_Contig($h->seqname);
	}

	my $con = $contig{$h->seqname};
	my $offset = $con->embl_offset;

	$h->seqname($con->cloneid);
	$h->start  ($h->start + $con->embl_offset - 1);
	$h->end    ($h->end   + $con->embl_offset - 1);

	print STDERR $h->gffstring     . "\t" . 
	        $con->chromosome       . "\t" . 
		$con->fpc_contig_name  . "\t" . 
		$con->fpc_contig_start . "\t" . 
		$con->fpc_contig_end   . "\n";
    }
    

}

sub usage {
    print STDERR "\nUsage genomehits [-host <host>] [-dbname <dbname>] [-infile <infile>] hitid1 hitid2...\n\n";
}

sub make_locator_string {
    my ($type,$module,$host,$port,$dbname,$dbuser,$dbpass) = @_;

    if ($type eq "rdb") {
	return 	"$module/host=$host;port=$port;dbname=$dbname;user=$dbuser;pass=$dbpass";
    } elsif ($type eq "timdb") {
	return "Bio::EnsEMBL::TimDB::Obj";
    } else {
	die "Database type [$type] not recognised\n";
    }
}

sub gffstring {
   my ($self) = @_;

   my $str = $self->seqname . "\t" . $self->source_tag . "\t" . 
          $self->primary_tag . "\t" . $self->start . "\t" . $self->end . "\t" ;

   my $strand = ".";
   if ($self->strand == 1) {
       $strand = "+";
   } elsif ($self->strand == -1) {
       $strand = "-";
   }

   $str .= $self->score .    "\t" . $strand . "\t.\t" ;     
   $str .= $self->hseqname . "\t" . $self->hstart . "\t" . 
           $self->hend     . "\t" . $self->hstrand ;

   return $str;
}

sub get_hit_ids {
    my ($infile,@arg) = @_;

    my @ids;

    if (defined($infile)) {
	if (-e $infile) {
	    open(IN,"<$infile") || die "Couldn't open input file";

	    while(<IN>) {
		chomp;
		push(@ids,$_);
	    }
	} else {
	    die "Input file [$infile] doesn't exist";
	}
    }

    push(@ids,@arg);

    return @ids;
}

