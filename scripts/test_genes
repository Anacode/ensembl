#!/usr/local/bin/perl

use strict;

use Bio::EnsEMBL::DBLoader;
use Bio::EnsEMBL::DBSQL::Obj;
use Bio::EnsEMBL::AceDB::Obj;
use Getopt::Long;
use Time::Local;

my $dbtype1 = 'rdb';
my $host1   = 'obi-wan';
my $dbname1 = 'ens500';
my $dbuser1 = 'ensro';
my $dbpass1 = undef;
my $port1   = 3306;

my $infile  = '';
$| = 1;
&GetOptions( 'dbtype1:s'  => \$dbtype1,
	     'host1:s'    => \$host1,
	     'port1:n'    => \$port1,
	     'dbname1:s'  => \$dbname1,
	     'dbpass1:s'  => \$dbpass1,
	     'infile=s'   => \$infile,
	     );

my ($db1) = get_db_handles();

my ($clone1,$acc) = get_cloneids($infile,@ARGV);
my $i = 0;

for ($i = 0; $i <= $#$clone1; $i++) {
    print("Processing clone " . $clone1->[$i] . "\t" . $acc->[$i] . "\n");
    eval {
    my $cl1    = $db1->get_Clone($acc->[$i]);

    my @genes1 = $cl1->get_all_Genes();

    my $count = 1;

    foreach my $gene1 (@genes1) {

        print("$acc->[$i]\t$clone1->[$i]\t" . $gene1->id . "\n");

        foreach my $exon ($gene1->each_unique_Exon) {
                print("Exon " . $exon->id . "\t" .$exon->start . "\t" . $exon->end . "\t" . $exon->strand . "\n");
        }
    }
  };
    if ($@) {
      print("Error processing clone: $@\n");
    }
  }
sub get_cloneids {
    my ($infile,@ARGV) = @_;

    my @clone1;
    my @acc;

    if (defined($infile)) {
	open(IN,"<$infile");
	while (<IN>) {
	    chomp;
            my ($clone,$acc) = split (' ',$_);	
	    push(@clone1,$clone);
            push(@acc,$acc); 
	}
	close(IN);
    }
    while ($#ARGV > 0) {
	my $clone1 = shift @ARGV;
	push(@clone1,$clone1);
    }
    return (\@clone1,\@acc);
}



sub get_db_handles {
    my ($db1);

    if( $dbtype1 =~ 'ace' ) {
	$db1 = Bio::EnsEMBL::AceDB::Obj->new( -host => $host1, 
					      -port => $port1);
    } elsif ( $dbtype1 =~ 'rdb' ) {

	my $locator = "Bio::EnsEMBL::DBSQL::Obj/host=$host1;" .
  	              "port=$port1;"      .
		      "dbname=ensembl;"  .
		      "user=$dbuser1;"    .
		      "pass=$dbpass1";

	$db1 = Bio::EnsEMBL::DBLoader->new($locator);
	
    } else {
	die("$dbtype1 is not a good type (should be ace or rdb)");

    }

    return ($db1);
}
