$Id$
Andreas Kähäri, andreas.kahari@ebi.ac.uk

    ======================================================================
                                About "apply.pl"
    ======================================================================

    The apply.pl program is a Perl script that will run on any Unix system
    with  a  Perl installed  (along  with  some common  non-standard  Perl
    modules) shell interpreter.   It also makes use of  the xdelta program
    (more on this below).

    The program will patch an older  release of an Ensembl database into a
    newer release by applying binary "delta files" created by the build.pl
    program (discussed elsewhere).  The delta files are applied to the raw
    MySQL database files  and will thus incorporate any  schema changes as
    well as data changes.  It is hoped that the process of downloading the
    delta files and applying them to  the older release of the database on
    an external  site will be  much quicker than downloading  the complete
    new release.

    Given a directory  of delta files created by build.pl  and a directory
    containing  the correct  and  untouched old  revision  of a  database,
    apply.pl  will create  a new  directory an  populate it  with the  new
    revision of the database.


Requirements / Configuration

    To work,  apply.pl needs the  following components, which  are usually
    not part of your every-day Unix base-system.

    1. The xdelta program (version 1.1.3, not version 2),
       http://sourceforge.net/projects/xdelta/

    2. The following Perl modules, some available as standard modules,
       others available from CPAN at http://www.cpan.org/

       * Compress::Zlib
       * Digest::MD5
       * File::Basename
       * File::Copy
       * Getopt::Std

    Check your  distribution CDs  before downloading and  installing these
    prerequisits from the web.


Usage

    Running  the  apply.pl program  without  any  arguments generates  the
    following informational text (or something very similar to it):

        Usage:  ./apply.pl [options] [--] database old_v new_v

        database    The database to work on, e.g. "homo_sapiens_core".
        old_v       The older version, e.g. "11_31".
        new_v       The newer version, e.g. "12_31".

        The options may be any of these:

        -c cmd  Path to xdelta executable.
                Default: "xdelta".
        -s path Path to the directory where the delta directory is stored.
                Default: "."
        -d path Path to the directory holding the old version of the
                database, and where the new version of the database
                should be created.  The new database directory will be
                given a unique name.
                Default: "."

    Assuming the  current directory  holds a sub-directory  containing the
    11_31  release of  e.g.  the homo_sapiens_core  Ensembl database,  and
    another sub-directory  containing the  delta files, the  12_31 release
    may be created by doing this:

        ./apply.pl homo_sapiens_core 11_31 12_31 | tee apply.out

    Note  that  the three  non-optional  arguments  are exactly  the  same
    as  those  used  with  build.pl   to  create  the  delta  files.   The
    delta  files for  this  example are  assumed to  be  available in  the
    homo_sapiens_core_11_31_delta_12_31 directory.

    The "| apply.out" bit  is only needed if you want  to store the output
    of the apply.pl in a separate file, "apply.out" in this case.

    Alternate locations  for the xdelta  executable etc. may  be specified
    using the options shown above.

    The  apply.pl program  will  verify  the MD5  checksums  of all  files
    involved in the  patch, including the delta files.   The patching will
    fail and  the whole  process will  be aborted  if any  checksum fails.
    This means  that databases modified  on the  external site can  not be
    updated in this way.

    Note:  If  a file is compressed  (*.gz), the checksum and  size of the
    patched  file will  *not* be  verified.  This  is because  xdelta will
    recompress the  file which in most  cases will result in  a compressed
    file that is slightly different  from the original file.  However, the
    xdelta program does still do its own MD5 checksum verification.


vim: et
