$Id$
Andreas Kahari, andreas.kahari@ebi.ac.uk

    ======================================================================
                                About "build.pl"
    ======================================================================

    The build.pl program is a Perl script that will run on any Unix system
    with  a  Perl installed  (along  with  some common  non-standard  Perl
    modules) shell interpreter.   It also makes use of  the xdelta program
    (more on this below).

    The program  will compute binary  "delta files"  that may be  used for
    upgrading  from  one  release  of  an Ensembl  database  to  the  next
    one.  The  deltas are computed from  the raw MySQL database  files and
    will thus incorporate any schema changes  as well as data changes.  It
    is hoped that the process of  downloading the delta files and applying
    them to the older release of the  database on an external site will be
    much quicker than downloading the complete new release.

    The  build.pl program  creates a  new directory  that apart  from some
    extra files *looks*  exactly the same as the MySQL  data directory for
    the new release.  The files in it, however, ought to be lot smaller.

    The new release may then be acuired by applying the delta files on the
    old release using the apply.pl program (discussed elsewhere).


Requirements / Configuration

    To work,  build.pl needs the  following components, which  are usually
    not part of your every-day Unix base-system.

    1. The xdelta program (version 1.1.3, not version 2),
       http://sourceforge.net/projects/xdelta/

    2. The following Perl modules, some available as standard modules,
       others available from CPAN at http://www.cpan.org/

       * Compress::Zlib
       * Digest::MD5
       * File::Basename
       * Getopt::Std

    3. The GNU zip (gzip) program.

    Check your  distribution CDs  before downloading and  installing these
    prerequisits from the web.


Usage

    Running  the  build.pl program  without  any  arguments generates  the
    following informational text (or something very similar to it):

        Usage:  ./build.pl [options] [--] database old_v new_v

        database    The database to work on, e.g. "homo_sapiens_core".
        old_v       The older version, e.g. "11_31".
        new_v       The newer version, e.g. "12_31".

        The options may be any of these:

        -c cmd  Path to xdelta executable.
                Default: "xdelta".
        -s path Path to the directory where the databases are stored.
                Default: "."
        -d path Path to the directory within which the delta
                directory should be created.
                Default: "."


    To create  the delta  files containing all  changes between  the 11_31
    release  and  the  12_31  release of  the  homo_sapiens_core  database
    located in the current directory, do this:

        ./build.pl homo_sapiens_core 11_31 12_31 | tee build.out

    This   creates    a   third   directory   called,    in   this   case,
    homo_sapiens_core_11_31_delta_12_31  (in the  current directory)  into
    which the  generated delta files will  be put.

    The "|  tee build.out" bit  ensures that  the output that  the program
    produces  (which includes  statistics about  how much  space that  was
    saved for each  file etc.) is both displayed in  the console and saved
    to the specified file, "build.out" in this case.

    To specify alternate locations for the databases, the generated files,
    or  for  the xdelta  executable,  use  the  -s,  -d, and  -c  switches
    respectively as described above.

    For each file in the both releases, the program will check whether the
    file

        * was not present in the old release,
        * hasn't changed in the new release,
        * is larger than 2 Gb (in which case xdelta can't be used), or
        * needs patching.

    This information is stored in the  *.info files in the delta directory
    and is later used by apply.pl to create the new release.

    A set of MD5  checksums of each file is also  calculated and stored in
    the *.info files  in the delta directory.  For each  file, up to three
    checksums are  calculated; that of  the old  release, that of  the new
    release, and that of  the delta file.  This is done  to assert that no
    errors were introduced in the  data transmission to the external site,
    and so  that we're absolutely  sure we  are patching the  correct file
    later on.  The  xdelta program also calculates and stores  its own MD5
    checksum with the delta files it creates.  Better safe than sorry.



vim: et
