*** Assembly mapping ***

This document describes how to create a whole genome alignment between two
assembly versions of a genome.

All scripts used in this pipeline have a --help option to print available
arguments (to be passed in from the commandline, or read from a ini-style
configuration file specified with --conffile).

For an example how to *use* the mapping created by these scripts, please see
EXAMPLE.use_mapping.pl.


-------------------------------------------------------------------------------
Overview
-------------------------------------------------------------------------------

Creating the whole genome alignment between two assembly versions of a genome is
a two-step process. Alignments are first created by matching identical clones,
and the remaining region pairs are then aligned using blastz. This only works
well for assemblies without major rearrangements (especially no clones moved
between chromosomes). You can use a test script to get a picture of your
assembly differences:

  $ ensembl/misc-scripts/assembly/compare_assemblies.pl


-------------------------------------------------------------------------------
Creating the whole genome alignment
-------------------------------------------------------------------------------

1. Load alternative assembly:
=============================

To start the process, you'll have to load the alternative chromosomes into the
Ensembl database for further processing. The reference and alternative database
need to be on the same db host.

a. Make suer you have all databases on the same host.

b. Then run the script:

  $ ensembl/misc-scripts/assembly/load_alternative_assembly.pl

The script creates backup tables of all tables that will subsequentially be
modified, so that you can track back errors if necessary.


2. Align identical clones:
==========================

In the first step of creating the alignment, clones with same name and version
are matched directly and alignment blocks for these regions are created. Clones
can be tagged manually to be excluded from these direct matches by listing them
in a file of clones to skip (--skipclones argument). This can be useful to get
better results in regions with major assembly differences.
       
The result is stored in the assembly table as an assembly between the
chromosomes of both genome assemblies.

Non-aligned blocks are stored in a temporary table (tmp_align) and will be
aligned using blastz in the second step.

To run the script:

  $ ensembl/misc-scripts/assembly/align_by_clone_identity.pl
  

3. Align non-identical regions:
===============================

In step 2, non-aligned block pairs are aligned using blastz. Alignments are
calculated by this algorithm:

  1. fetch region from tmp_align
  2. write soft-masked sequences to temporary files
  3. align using blastz
  4. filter best hits (for query sequences, i.e. alternative regions) using
     axtBest
  5. parse blastz output to create blocks of exact matches only
  6. remove overlapping target (reference) alignments
  7. write alignments to assembly table

A wrapper script will run the actual script (align_nonident_regions.pl) one
chromosome at a time over lsf:

  $ ensembl/misc-scripts/assembly/align_nonident_regions_wrapper.pl


4. QC:
======

a. mapping stats:
-----------------

This script prints some statistics about the alignment, like the alignment
coverage and length of alignment blocks.

  $ ensembl/misc-scripts/assembly/mapping_stats.pl


b. check if mapping is correct:
-------------------------------

This script checks if the whole genome alignment between two assemblies is
correct. It does so by comparing the sequence in the reference database with
the sequence of the projected fragments in the alternative database.

  $ ensembl/misc-scripts/assembly/check_mapping.pl


5. temporary table cleanup:
===========================

Finally, once you are happy with the results, delete all temporary and backup
tables no longer needed.

  $ ensembl/misc-scripts/cleanup_tmp_tables.pl
  

-------------------------------------------------------------------------------
Scripts and main modules used
-------------------------------------------------------------------------------

  ensembl/modules/Bio/EnsEMBL/Utils/ConversionSupport.pm

  ensembl/misc-scripts/assembly/compare_assemblies.pl

  ensembl/misc-scripts/assembly/load_alternative_assembly.pl
  ensembl/misc-scripts/assembly/align_by_clone_identity.pl
  ensembl/misc-scripts/assembly/align_nonident_regions_wrapper.pl
  ensembl/misc-scripts/assembly/align_nonident_regions.pl
  ensembl/misc-scripts/assembly/AssemblyMapper/BlastzAligner.pm

  ensembl/misc-scripts/assembly/mapping_stats.pl
  ensembl/misc-scripts/assembly/check_mapping.pl

  ensembl/misc-scripts/cleanup_tmp_tables.pl


-------------------------------------------------------------------------------
Further documentation
-------------------------------------------------------------------------------

Each script involved is commented and has detailed information in POD format.

A datareview presentation describing this pipeline can be found at

  ensembl-personal/datareviews/presentations/meidl20060413.ppt

(internal users only)

