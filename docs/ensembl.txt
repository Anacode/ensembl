
Ensembl is a software system to automatically analyses and maintain
the analysis on genomic DNA. It is entirely open source (BSD style
license) and is run openly from http://www.ensembl.org/. Please go
the web site for the most up to date documentation, code and
discussion.

To install Ensembl, read install.txt. If you are running a UNIX system
and have MySQL installed it is very easy to install.

QuickStart
----------

Everyone hates documentation. Here is a very simple synopsis
of Ensembl as a perl script to get you started.

#!/usr/local/bin/perl

use Bio::EnsEMBL::DBLoader;

# this connects to the Ensembl database. Just change the parameters
# for your site
my  $locator = "Bio::EnsEMBL::DBSQL::Obj/host=obi-wan.sanger.ac.uk;dbuser=ensro;dbname=ensdev";
$db_obj = Bio::EnsEMBL::DBLoader->new($locator);

# there are many more methods than just these. 

foreach my $clone_id ( $db->get_all_Clone_id()  ) {
   my $clone = $db->get_Clone($clone_id);
   print "Clone accession,",$clone->id(),"\n";
   foreach $gene ( $clone->get_all_Genes() ) {
      foreach $trans ( $gene->each_Transcript() ) {
         $pep = $trans->translate();
         print "Transcript ",$trans->id," translation starts with [",substr($pep->seq,0,10),"]\n";
         foreach $exon ( $trans->each_Exon() ) {
	    print "Exon ",$exon->start," ",$exon->end," on ",$exon->contig_id(),"\n";
         }
      }
   }
}

Objects in Ensembl
------------------
         
Ensembl is based around a number of objects, currently
written in Perl. The objects are the best way to look
at Ensembl, not the SQL table structure. The main
objects are as follows:

   Bio::EnsEMBL::DBSQL::Obj    - The Ensembl database object
   Bio::EnsEMBL::DBSQL::Clone  - A Clone (sequencing unit) 
   Bio::EnsEMBL::DBSQL::RawContig - 
                        
	           A Contig, being continuous DNA sequenced together.
                   A Clone has a number of contigs: finished clones
                   have one Contig, working draft clones have more than one.

   Bio::EnsEMBL::DB::VirtualContig - A in-software contig made from a number
                  of RawContigs put together due to overlap or sized gapped
                  information

NB. We call contigs of DNA which span across a number of clones
"CloneContigs". The Contig object above refers to what comes out of
the assembly process in working draft data.

   Bio::EnsEMBL::Gene  - A Gene: a region of DNA that encodes one transcribed DNA
   Bio::EnsEMBL::Transcript - A particular splicing pattern of a gene
   Bio::EnsEMBL::Exon  - A exon contained in a gene
   Bio::EnsEMBL::Translation - Definition of a particular translation of a gene.

The gene objects can hold the following cases:
  
   a) Gene structures across pieces of DNA sequence where the
interveaning sequence is not known (nor do we have to assumme a length
to them)

   b) Alternative transcripts of a Gene. A distinction is made between
alternative transcripts producing unique cDNAs and alternative protein
coding products. In other words, a Gene could produce 5 unique cDNA
structures, but only 3 unique protein structures, with 3 of the 5
cDNAs making the same protein but differing in their UTRs.

   Ensembl also reuses a number of Bioperl objects, in particular 

   Bio::Seq                 - Sequence object 
   Bio::PrimarySeq          - Light weight, "just the sequence" object
   Bio::SeqFeature::Generic - Generic seq feature base class 
   Bio::SeqFeature::Homol   - seq feature class representing a similarity hit.

Here is a quick summary of the methods on these objects.

Bio::EnsEMBL::DBLoader - The database loader system
---------------------------------------------------

This system allows you to a) specify at run time which database you
want to use and b) store the location of an Ensembl database as a
simple string. It provides a Bio::EnsEMBL::DBSQL::Obj (for more
details about using other databases, read the section on "Extending
Ensembl").

$db = Bio::EnsEMBL::DBLoader->new("Bio::EnsEMBL::DBSQL::Obj/host=obi-wan.sanger.ac.uk;dbuser=ensro;dbname=ensdev");


Bio::EnsEMBL::DBSQL::Obj    - The Ensembl database object
---------------------------------------------------------

  $gene     = $db->get_Gene('ENSG000012'); - gets the gene given its id
  $clone    = $db->get_Clone('AL000012');  - gets the Clone given its accession number
  @clone_id = $db->get_all_Clone_id();     - gets all valid clone ids
  @gene_id  = $db->get_all_Gene_id();      - gets all valid gene ids

Bio::EnsEMBL::DBSQL::Clone  - A Clone (sequencing unit) 
-------------------------------------------------------

  @genes   = $clone->get_all_Genes();   - All genes attached to this Cloen
  @contigs = $clone->get_all_Contigs(); - All contigs in a clone
  $version = $clone->version();         - Version of the clone, from Ensembl's perspective
  $version = $clone->embl_version();    - Version of the data in the clone

Available on all contigs (whether Raw or Virtual)
-------------------------------------------------

  @genes    = $contig->get_all_Genes()       - Gets all the genes attached to this contig
  @features = $contig->get_all_SeqFeatures() - All the computed sequence features for this
                                               contig
  $length   = $contig->length();             - Length of the contig

  Contigs also inheriet from Bio::SeqI this means that the following
methods work:

   @sf = $contig->top_SeqFeatures(); # genes map to virtual genes
   $seq = $contig->seq(); # sequence as a string
   $seq = $contig->subseq(100,200); # sequence as a string

They can also be used to provide EMBL/GenBank flat files

   $seqio = Bio::SeqIO->new('-format' => 'EMBL', -fh => \*STDOUT);
   $seqio->write_seq($contig);

They can also provide extensions to the left and right

   # produces a new contig 1000 base pairs to the 3' of this contig
   $newcontig = $contig->extend(1000,-1000); 

Bio::EnsEMBL::Gene - A gene structure
-------------------------------------

  @trans    = $gene->each_Transcript()       - Each transcript for this Gene
  $id       = $gene->id()                    - id for the gene.

Notice that a gene does not have start/end points. That is because a gene can 
span more than one contig, so the start could be on one contig and the end
on another. We are planning to provide ways of viewing an entire gene on
a single coordinate system: stay tuned.

Bio::EnsEMBL::Transcript - A transcript structure
-------------------------------------------------

  @exons   = $trans->each_Exon();            - Each exon
  $seq     = $trans->dna_seq();              - The cDNA sequence of the transcript (Bio::Seq)
  $pep     = $trans->translate();            - The translation of the transcript (Bio::Seq)

Bio::EnsEMBL::Exon - An Exon (inheriets from Bio::SeqFeature::Generic)
----------------------------

Exons are actually attached to sequences

Methods inherieted from Bio::SeqFeature::Generic

  $start  = $exon->start()  - start position in bio coordinates. 
  $end    = $exon->end()    - end position in bio coordinates
  $strand = $exon->strand() - 1 or -1










