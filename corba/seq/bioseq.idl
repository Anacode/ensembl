
module BioSource {
  
  // release means that no other calls on
  // this object will be made. It is just
  // a basic deconstrutor/destroy type method
  interface ReleaseableObject {
    void release();
  };

  // The lightweight sequence object. The controversial thing here is
  // that we do not provide subtypes of the object, but this is
  // inferred programmatically through the type method. This is is not
  // mad as it seems as there is no biological smarts to this system,
  // so sub types are simply not required (there are no revcom or
  // translate mechansims). Subtyping is perfectly sensible in the
  // client system, but here it just doesn't help us much.

  enum seqtype { DNA, RNA, Protein };
  interface Seq  : ReleaseableObject {
    string seq(); // the entire sequence in IUPAC codes
    string subseq(in long start,in long end); // a sub sequence in IUPAC codes
    string id(); // human readable name
    string accession(); // computer assigned name - see below
    string description(); // human readable description. Perfectly ok to be null
    seqtype type(); // type of sequence.
  };

  interface SeqDB : ReleaseableObject {
    Seq get_Seq_by_id(in string id);
    Seq get_Seq_by_acc(in string acc);
  };

};
